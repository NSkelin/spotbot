// this file holds a list of the commands i used to automate the spot instance creation

//credentials for mc admin
aws configure
access = AKIAVW3BLGQLYRKNDUH5
secret = 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
region = us-west-2

//credentials for nskelin
aws configure
access = AKIAVW3BLGQL3SVGICX7
secret = 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
region = us-west-2

// copy data from s3 bucket to ec2 instance
aws s3 cp s3://mc-server-a00912617/minecraft_server ./minecraft_server --recursive

// copy data from ec2 instance to s3 bucket
aws s3 cp ./minecraft_server s3://mc-server-a00912617/minecraft_server --recursive

// get and install java
wget --no-check-certificate --no-cookies --header "Cookie: oraclelicense=accept-securebackup-cookie" http://download.oracle.com/otn-pub/java/jdk/8u141-b15/336fa29ff2bb4ef291e347e091f7f4a7/jdk-8u141-linux-x64.rpm
sudo yum install -y jdk-8u141-linux-x64.rpm

// run the minecraft server
aws ssm send-command --document-name "AWS-RunShellScript" --comment "Copy data to S3 as backup / save" --instance-ids "i-00f4355ca4f5319ca" --parameters '{"commands":["sudo java -Xmx6144M -Xms6144M -jar ./minecraft_server/server.jar nogui"],"executionTimeout":["86400"],"workingDirectory":["/home/ec2-user"]}' --timeout-seconds 600 --region us-west-2
sudo java -Xmx6144M -Xms6144M -jar ./server.jar nogui

// request spot instance
aws ec2 request-spot-instances --availability-zone-group us-west-2 --instance-count 1 --launch-specification file://specification.json
--dry-run // for testing errors (runs but doesnt actually do anything just checks for bugs)
[--client-token <value>]
//specification.json in seperate file

// terminate spot instance
aws ec2 terminate-instances --instance-ids <value>

//attach role

// restart SSM agent
sudo systemctl restart amazon-ssm-agent

// send command from aws cli to instances
aws ssm send-command --document-name "AWS-RunShellScript" --comment "Copy data to S3 as backup / save" --instance-ids "i-052c6fbe176169b89" --parameters '{"commands":["aws s3 cp s3://mc-server-a00912617/terraria_vanilla ./server --recursive, cd server, sudo chmod +x TerrariaServer.bin.x86_64, sudo screen -dm ./TerrariaServer.bin.x86_64 -config serverconfig.txt "],"executionTimeout":["86400"],"workingDirectory":["/home/ec2-user/server"]}' --timeout-seconds 600 --region us-west-2

// create a tag for the instance
aws ec2 create-tags --resource ${ID} --tags Key=Name,Value=mcm_server

aws s3 cp ./minecraft_server s3://mc-server-a00912617/mcm_server --recursive
aws s3 cp ./minecraft_server s3://mc-server-a00912617/${server_name} --recursive


//todo
maybe make start cmd more robust and check if everythings ok (like did the files copy) and if they are try to resolve the problems.
add color highlights to certain things (ex green:server is ONLINE)
if it fails to start make it undo all its done (aka kill server etc)
change server region
should delete rules alarms /etc on termination
link server costs somehow - donations?
if aws credits out do not start server
script to download file from s3 to personal computer
script to upload file from personal computer to s3
detect if server (pid) is already running on ec2 instance before "restart script" starts a new one
create setup.sh which will create and configure all necessary roles
create cleanup.sh which will remove all roles added for this program
backup on spot termination
multiple backups incase one gets corrupted 
	- get all files if less than 3 stop loop else delete one thats less than todays date 
	- download file then copy it and rename old one to file.date then use copy
paid perks (aka host the server for them but they pay me for it)
game list
	- arma 3
	- vanilla minecraft
	- modded minecraft
	- space engineers
	- 7 days to die
	- teraria


rules
startcommands.json
	- the command to start the server must be the last command
		- restart command expects this
		- getinstancestatus expects this